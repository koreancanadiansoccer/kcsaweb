# This is a basic workflow to help you get started with Actions

name: Deploy to staging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Step 2 : verification npm install
      - name: npm install for Server
        run: |
          pwd
          npm ci

      - name: npm install in client DIR and build
        run: |
          cd client
          pwd
          npm ci
          npm run build
          echo 'CLIENT DONE'
          ls
        env:
          CI: false

      # Step 3 : build client
      # - name: npm run build in Client DIR and Create Pull Requset
      #   run: |
      #     cd client
      #     npm run build

      # Step 3 : Commit to branch.
      - name: npm run build in Client DIR and Create Pull Requset
        run: |
          git config --global user.name 'koreancanadiansoccer'
          git config --global user.email 'koreancanadiansoccer@gmail.com'
          git add .
          git commit -m "Build client for deploying"
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse HEAD)"
          echo "${{ steps.vars.outputs.sha_short }}"

      - name: confirm variables;
        run: |
          echo 'Original sha'
          echo "${{ github.sha }}"
          echo 'new sha'
          echo "${{ steps.vars.outputs.sha_short }}"
      # # Step 4
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # Code deploy Step 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      # Cod deploy Step 2
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name "kcsa-webserver" \
            --deployment-group-name "deploy-kcsaweb-ec2" \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ steps.vars.outputs.sha_short }}

  # Deploy
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     # Step 1
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #     # Step 2
  #     - name: Create CodeDeploy Deployment
  #       id: deploy
  #       run: |
  #         aws deploy create-deployment \
  #           --application-name "kcsa-webserver" \
  #           --deployment-group-name "deploy-kcsaweb-ec2" \
  #           --deployment-config-name CodeDeployDefault.OneAtATime \
  #           --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
