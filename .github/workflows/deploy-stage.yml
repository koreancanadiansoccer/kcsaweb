# This is a basic workflow to help you get started with Actions

name: Deploy to staging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Step 2 : verification npm install
      # npm ci : This command is similar to npm install, except it's meant to be used in automated environments such as test platforms,
      #          continuous integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies.
      - name: npm install for Server
        run: |
          pwd
          npm ci

      - name: npm install in client DIR and build
        run: |
          cd client
          pwd
          npm ci
          echo 'CLIENT DONE'
          ls
        env:
          CI: false

          # Step 3 : Commit to branch.
          # - name: Create commit
          #   run: |
          #     git config --global user.name 'koreancanadiansoccer'
          #     git config --global user.email 'koreancanadiansoccer@gmail.com'
          #     git add .
          #     git commit -m "Build client for deploying"

          # Create Pull request.
          # - name: Create Pull request
          #   id: cpr
          #   uses: peter-evans/create-pull-request@v3
          #   with:
          #     token: ${{ secrets.PAT }}
          #     commit-message: Build
          #     author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          #     base: deploy
          #     title: 'Prepare deployment build'
          #     branch: 'Deploy-${{github.sha}}'
          # delete-branch: true

      # - name: Pull Request Automerge
      #   if: steps.cpr.outputs.pull-request-operation == 'created'
      #   uses: peter-evans/enable-pull-request-automerge@v1
      #   with:
      #     token: ${{ secrets.PAT }}
      #     pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
      #     merge-method: squash

      # - name: Set latest commit id as var
      #   id: vars
      #   shell: bash
      #   run: |
      #     echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      #     echo "::set-output name=sha_short::$(git rev-parse HEAD)"
      #     echo "${{ steps.vars.outputs.sha_short }}"

      # - name: confirm variables;
      #   run: |
      #     echo 'Original sha'
      #     echo "${{ github.sha }}"
      #     echo 'new sha'
      #     echo "${{ steps.vars.outputs.sha_short }}"
      # # Step 4
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1
      - name: Configure AWS credentials for deploy
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      # Step 2
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name "kcsa-webserver" \
            --deployment-group-name "deploy-kcsaweb-ec2" \
            --deployment-config-name CodeDeployDefault.OneAtATime \

  # Deploy
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     # Step 1
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #     # Step 2
  #     - name: Create CodeDeploy Deployment
  #       id: deploy
  #       run: |
  #         aws deploy create-deployment \
  #           --application-name "kcsa-webserver" \
  #           --deployment-group-name "deploy-kcsaweb-ec2" \
  #           --deployment-config-name CodeDeployDefault.OneAtATime \
